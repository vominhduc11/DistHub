
services:
  config-server:
    image: openjdk:17-jdk-slim
    container_name: dishub_config_server
    ports:
      - "8888:8888"
    volumes:
      - ./build/jars/config-server.jar:/app/config-server.jar
    working_dir: /app
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=config-server
      - SERVER_PORT=8888
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS=classpath:/configs/
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/127.0.0.1/8888' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network
    command: java -jar config-server.jar

  api-gateway:
    image: openjdk:17-jdk-slim
    container_name: dishub_api_gateway
    ports:
      - "8081:8081"
    volumes:
      - ./build/jars/api-gateway.jar:/app/api-gateway.jar
    working_dir: /app
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=api-gateway
      - SERVER_PORT=8081
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_INSTANCE_HOSTNAME=api-gateway
      - AUTH_SERVICE_JWK_URI=http://auth-service:8082/.well-known/jwks.json
      - AUTH_SERVICE_URI=http://auth-service:8082
      - USER_SERVICE_URI=http://user-service:8083
      - NOTIFICATION_SERVICE_URI=http://notification-service:8084
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - CORS_ALLOW_CREDENTIALS=true
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - frontend-network  # External access
      - backend-network   # Internal services access
    command: java -jar api-gateway.jar

  discovery-service:
    image: openjdk:17-jdk-slim
    container_name: dishub_discovery_service
    ports:
      - "8761:8761"
    volumes:
      - ./build/jars/discovery-service.jar:/app/discovery-service.jar
    working_dir: /app
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=discovery-service
      - SERVER_PORT=8761
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_INSTANCE_HOSTNAME=discovery-service
      - EUREKA_INSTANCE_PREFER_IP=true
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_SERVER_ENABLE_SELF_PRESERVATION=false
      - EUREKA_SERVER_EVICTION_INTERVAL=10000
    depends_on:
      config-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/127.0.0.1/8761' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - frontend-network  # External access for Eureka dashboard
      - backend-network   # Backend services registration
    command: java -jar discovery-service.jar

  auth-service:
    image: openjdk:17-jdk-slim
    container_name: dishub_auth_service
    ports:
      - "8082:8082"
    volumes:
      - ./build/jars/auth-service.jar:/app/auth-service.jar
    working_dir: /app
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=auth-service
      - SERVER_PORT=8082
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_INSTANCE_HOSTNAME=auth-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dishub_postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=voduc
      - SPRING_DATASOURCE_PASSWORD=voduc123
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
    command: java -jar auth-service.jar

  user-service:
    image: openjdk:17-jdk-slim
    container_name: dishub_user_service
    ports:
      - "8083:8083"
    volumes:
      - ./build/jars/user-service.jar:/app/user-service.jar
    working_dir: /app
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=user-service
      - SERVER_PORT=8083
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_INSTANCE_HOSTNAME=user-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dishub_postgres:5432/user_db
      - SPRING_DATASOURCE_USERNAME=voduc
      - SPRING_DATASOURCE_PASSWORD=voduc123
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_SHOW_SQL=true
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
    command: java -jar user-service.jar

  notification-service:
    image: openjdk:17-jdk-slim
    container_name: dishub_notification_service
    ports:
      - "8084:8084"
    volumes:
      - ./build/jars/notification-service.jar:/app/notification-service.jar
    working_dir: /app
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=notification-service
      - SERVER_PORT=8084
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_INSTANCE_HOSTNAME=notification-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dishub_postgres:5432/notification_db
      - SPRING_DATASOURCE_USERNAME=voduc
      - SPRING_DATASOURCE_PASSWORD=voduc123
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka1:9092,kafka2:9093,kafka3:9094
      - SPRING_REDIS_HOST=dishub_redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=voduc123
      - MAIL_HOST=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USERNAME=vominhduc760@gmail.com
      - MAIL_PASSWORD=agcbtolwkdbbjwoi
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
    command: java -jar notification-service.jar

  language-service:
    image: openjdk:17-jdk-slim
    container_name: dishub_language_service
    ports:
      - "8085:8085"
    volumes:
      - ./build/jars/language-service.jar:/app/language-service.jar
    working_dir: /app
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_APPLICATION_NAME=language-service
      - SERVER_PORT=8085
      - CONFIG_SERVER_URL=http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=true
      - EUREKA_CLIENT_FETCH_REGISTRY=true
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=true
      - EUREKA_INSTANCE_HOSTNAME=language-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://dishub_postgres:5432/language_db
      - SPRING_DATASOURCE_USERNAME=voduc
      - SPRING_DATASOURCE_PASSWORD=voduc123
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_SHOW_SQL=true
    depends_on:
      config-server:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - backend-network
    command: java -jar language-service.jar

  postgres:
    image: postgres:15
    container_name: dishub_postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: voduc
      POSTGRES_PASSWORD: voduc123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voduc -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: dishub_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dishub.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      - postgres
    networks:
      - frontend-network  # External web UI access
      - backend-network   # Database connectivity

  redis:
    image: redis:7-alpine
    container_name: dishub_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass voduc123
    networks:
      - backend-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dishub_redis_commander
    environment:
      - REDIS_HOSTS=local:dishub_redis:6379:0:voduc123
    ports:
      - "8090:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - frontend-network  # External web UI access
      - backend-network   # Redis connectivity

  # ZooKeeper Cluster (3 nodes)
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dishub_zookeeper1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2181:2181"
    volumes:
      - zookeeper1_data:/var/lib/zookeeper/data
      - zookeeper1_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - backend-network

  zookeeper2:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dishub_zookeeper2
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2182:2182"
    volumes:
      - zookeeper2_data:/var/lib/zookeeper/data
      - zookeeper2_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - backend-network

  zookeeper3:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dishub_zookeeper3
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    ports:
      - "2183:2183"
    volumes:
      - zookeeper3_data:/var/lib/zookeeper/data
      - zookeeper3_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - backend-network

  # Kafka Cluster (3 brokers)
  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dishub_kafka1
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka1_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - backend-network

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dishub_kafka2
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka2_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - backend-network

  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dishub_kafka3
    depends_on:
      - zookeeper1
      - zookeeper2
      - zookeeper3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_IN_SYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka3_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - backend-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: dishub_kafka_ui
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8091:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093,kafka3:9094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper1:2181,zookeeper2:2182,zookeeper3:2183
    restart: unless-stopped
    networks:
      - frontend-network  # External web UI access
      - backend-network   # Kafka connectivity

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    # Removed internal: true to allow internet access for email services

volumes:
  postgres_data:
  pgadmin_data:
  redis_data:
  zookeeper1_data:
  zookeeper1_logs:
  zookeeper2_data:
  zookeeper2_logs:
  zookeeper3_data:
  zookeeper3_logs:
  kafka1_data:
  kafka2_data:
  kafka3_data:
